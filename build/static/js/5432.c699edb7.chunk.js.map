{"version":3,"file":"static/js/5432.c699edb7.chunk.js","mappings":"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","sources":["kakaoapi/CurrentAddress.js","restaurantfind/containers/NearContainer.js","restaurantfind/pages/NearList.js"],"sourcesContent":["/* eslint-disable no-undef */\r\nimport React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport fontSize from '../styles/fontSize';\r\n\r\nconst CurrentAddressWrapper = styled.div`\r\n  font-family: \"NanumSquareB\";\r\n  font-size: ${fontSize.medium};\r\n`;\r\n\r\nconst CurrentAddress = () => {\r\n  const [address, setAddress] = useState('');\r\n\r\n  useEffect(() => {\r\n    const geocoder = new kakao.maps.services.Geocoder();\r\n\r\n    navigator.geolocation.getCurrentPosition((pos) => {\r\n      const { latitude, longitude } = pos.coords;\r\n      geocoder.coord2RegionCode(longitude, latitude, (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          for (const r of result) {\r\n            if (r.region_type === 'H') {\r\n              setAddress(r.address_name);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }, [address]);\r\n\r\n  return address && (\r\n    <CurrentAddressWrapper>\r\n      {address}\r\n    </CurrentAddressWrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(CurrentAddress);\r\n","/* eslint-disable no-undef */\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { apiList } from '../../restaurant/apis/apiInfo';\r\nimport ItemsBox from '../components/ItemsBox';\r\nimport Pagination from '../../commons/components/Pagination';\r\nimport Loading from '../../commons/components/Loading';\r\nimport KakaoMap from '../../kakaoapi/KakaoMap';\r\nimport marker from '../../images/marker.png';\r\nimport styled from 'styled-components';\r\n\r\nconst ItemsBoxWrapper = styled.div `\r\n  margin: 20px auto;\r\n`;\r\n\r\nfunction getQueryString(searchParams) {\r\n  const qs = {};\r\n  if (searchParams.size > 0) {\r\n    for (const [k, v] of searchParams) {\r\n      qs[k] = v;\r\n    }\r\n  }\r\n  return qs;\r\n}\r\n\r\nconst NearContainer = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const [search, setSearch] = useState(() => getQueryString(searchParams));\r\n  const [items, setItems] = useState([]);\r\n  const [pagination, setPagination] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [center, setCenter] = useState([]); // 지도 중심 좌표\r\n  const [locations, setLocations] = useState([]); // 마커 표기할 위도, 경도 정보\r\n\r\n  /* 현재 위치 찾기 S */\r\n  useEffect(() => {\r\n    const geocoder = new kakao.maps.services.Geocoder();\r\n\r\n    navigator.geolocation.getCurrentPosition((pos) => {\r\n      // 현재 위치 설정\r\n      const { latitude, longitude } = pos.coords;\r\n      setCenter({ lat: latitude, lng: longitude });\r\n\r\n      geocoder.coord2RegionCode(longitude, latitude, (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          for (const r of result) {\r\n            if (r.region_type === 'H') {\r\n              setSearch((search) => ({\r\n                ...search,\r\n                sido: r.region_1depth_name, // 시도\r\n                sigungu: r.region_2depth_name, // 시군구\r\n                dong: r.region_3depth_name, // 동\r\n              }));\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }, [setSearch, setCenter]);\r\n  /* 현재 위치 찾기 E */\r\n\r\n  useEffect(() => {\r\n    if (!search?.dong) {\r\n      return;\r\n    }\r\n\r\n    (async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        const { items, pagination } = await apiList(search);\r\n\r\n        setItems(items);\r\n        setPagination(pagination);\r\n        setLoading(false);\r\n\r\n        /* 마커 표기 좌표 가공 처리 S */\r\n        if (!items || items?.length === 0) {\r\n          return;\r\n        }\r\n\r\n        const _locations = items\r\n          .filter((d) => d.rstrLa && d.rstrLo && d.rstrNm)\r\n          .map((d) => ({\r\n            lat: d.rstrLa,\r\n            lng: d.rstrLo,\r\n            info: {\r\n              content: `<a href=\"/restaurant/info/${d.rstrId}\" style=\"font-weight:bold\">${d.rstrNm}</a>`,\r\n              clickable: true,\r\n              removable: true,\r\n            }, // 인포윈도우\r\n          }));\r\n\r\n        setLocations(_locations);\r\n\r\n        if (_locations.length > 0)\r\n          setCenter({ lat: _locations[0].lat, lng: _locations[0].lng });\r\n        /* 마커 표기 좌표 가공 처리 E */\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    })();\r\n  }, [search]);\r\n\r\n  /* 페이지 변경 함수 */\r\n  const onChangePage = useCallback((page) => {\r\n    setSearch((search) => ({ ...search, page }));\r\n  }, []);\r\n\r\n  // 로딩 처리\r\n  if (loading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {locations && locations.length > 0 && (\r\n        <KakaoMap\r\n          currentLocation={true}\r\n          center={center}\r\n          marker={locations}\r\n          markerImage={marker}\r\n          zoom={6}\r\n        />\r\n      )}\r\n      <ItemsBoxWrapper>\r\n        <ItemsBox items={items} />\r\n        {items.length > 0 && (\r\n          <Pagination onClick={onChangePage} pagination={pagination} />\r\n        )}\r\n      </ItemsBoxWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(NearContainer);\r\n","import React from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { OuterBox, ListOuterBox } from '../../commons/components/LayoutBox';\r\nimport { MainTitle } from '../../commons/components/TitleBox';\r\nimport CurrentAddress from '../../kakaoapi/CurrentAddress';\r\nimport NearContainer from '../containers/NearContainer';\r\nimport ModalChat from '../../ai/components/ModalChat';\r\nimport { RiRobot2Line } from \"react-icons/ri\";\r\n\r\nconst NearList = () => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{t('주변_식당')}</title>\r\n      </Helmet>\r\n      <OuterBox>\r\n        <MainTitle>{t('주변_식당')}</MainTitle>\r\n        <ListOuterBox>\r\n          <CurrentAddress />\r\n          <NearContainer />\r\n        </ListOuterBox>\r\n        <ModalChat>\r\n          <RiRobot2Line style={{width: '50px', height: '50px'}}/>\r\n        </ModalChat>\r\n      </OuterBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(NearList);\r\n"],"names":["CurrentAddressWrapper","styled","div","_templateObject","_taggedTemplateLiteral","fontSize","medium","CurrentAddress","address","setAddress","useState","useEffect","geocoder","kakao","maps","services","Geocoder","navigator","geolocation","getCurrentPosition","pos","latitude","longitude","coords","coord2RegionCode","result","status","Status","OK","r","region_type","address_name","_jsx","children","React","ItemsBoxWrapper","NearContainer","searchParams","useSearchParams","search","setSearch","qs","size","k","v","getQueryString","items","setItems","pagination","setPagination","loading","setLoading","center","setCenter","locations","setLocations","lat","lng","sido","region_1depth_name","sigungu","region_2depth_name","dong","region_3depth_name","apiList","length","_locations","filter","d","rstrLa","rstrLo","rstrNm","map","info","content","concat","rstrId","clickable","removable","err","console","error","onChangePage","useCallback","page","Loading","_jsxs","_Fragment","KakaoMap","currentLocation","marker","markerImage","zoom","ItemsBox","Pagination","onClick","NearList","t","useTranslation","Helmet","OuterBox","MainTitle","ListOuterBox","ModalChat","RiRobot2Line","style","width","height"],"sourceRoot":""}